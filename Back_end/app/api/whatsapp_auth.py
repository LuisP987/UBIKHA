"""
API para autenticaci√≥n y registro con verificaci√≥n por WhatsApp
Implementa el flujo completo de registro con verificaci√≥n por WhatsApp
"""

from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import IntegrityError
from db.database import obtener_sesion
from services.whatsapp import WhatsAppService
from services.user import buscar_usuario_por_email, buscar_usuario_por_telefono, crear_usuario
from schemas.verification import PhoneVerification, CodeVerification, VerificationResponse
from schemas.user import RegistroUsuario, UsuarioMostrar, RegistroCompletarWhatsApp
from utils.security.seguridad import hashear_password
from utils.security.jwt import crear_token
import logging

# Configurar logging
logger = logging.getLogger(__name__)

# Router para WhatsApp Auth
router = APIRouter(prefix="/whatsapp-auth", tags=["WhatsApp Authentication"])

# Instancia del servicio WhatsApp
whatsapp_service = WhatsAppService()

@router.get("/service/status")
async def verificar_estado_whatsapp():
    """
    üîç Verificar estado del servicio WhatsApp
    
    Endpoint para verificar si el microservicio de WhatsApp est√° disponible
    """
    try:
        is_connected = await whatsapp_service.check_whatsapp_service_status()
        
        if is_connected:
            return {
                "success": True,
                "message": "Servicio WhatsApp conectado exitosamente",
                "data": {"conectado": True}
            }
        else:
            return {
                "success": False,
                "message": "Servicio WhatsApp no disponible",
                "data": {"conectado": False}
            }
            
    except Exception as e:
        logger.error(f"Error al verificar estado de WhatsApp: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Error al conectar con el servicio WhatsApp"
        )

@router.post("/enviar-codigo-registro", response_model=VerificationResponse)
async def enviar_codigo_registro(
    phone_data: PhoneVerification,
    db: AsyncSession = Depends(obtener_sesion)
):
    """
    üì± PASO 1: Enviar c√≥digo de verificaci√≥n para registro
    
    Env√≠a un c√≥digo de verificaci√≥n de 6 d√≠gitos al WhatsApp del usuario
    que desea registrarse. Antes verifica que el n√∫mero no est√© ya registrado.
    
    Args:
        phone_data: Datos del tel√©fono a verificar
        
    Returns:
        VerificationResponse: Respuesta con el estado del env√≠o
    """
    try:
        # Verificar que el n√∫mero no est√© ya registrado
        usuario_existente = await buscar_usuario_por_telefono(db, phone_data.phone_number)
        if usuario_existente:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Este n√∫mero de tel√©fono ya est√° registrado. Usa el login en su lugar."
            )
        
        # Verificar estado del servicio WhatsApp
        service_available = await whatsapp_service.check_whatsapp_service_status()
        if not service_available:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail="El servicio de WhatsApp no est√° disponible en este momento"
            )
        
        # Enviar c√≥digo de verificaci√≥n
        success = await whatsapp_service.send_verification_code(phone_data.phone_number)
        
        if success:
            logger.info(f"C√≥digo de registro enviado a {phone_data.phone_number}")
            return VerificationResponse(
                success=True,
                message="C√≥digo de verificaci√≥n enviado exitosamente",
                data={"telefono": phone_data.phone_number}  # Solo 9 d√≠gitos
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Error al enviar el c√≥digo de verificaci√≥n"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error inesperado al enviar c√≥digo: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )

@router.post("/verificar-codigo-registro", response_model=VerificationResponse)
async def verificar_codigo_registro(verification: CodeVerification):
    """
    ‚úÖ PASO 2: Verificar c√≥digo de registro
    
    Verifica que el c√≥digo de 6 d√≠gitos enviado por WhatsApp sea correcto.
    Si es v√°lido, el usuario puede proceder a completar su registro.
    
    Args:
        verification: Datos de verificaci√≥n (tel√©fono y c√≥digo)
        
    Returns:
        VerificationResponse: Respuesta con el estado de la verificaci√≥n
    """
    try:
        # Verificar el c√≥digo
        is_valid = await whatsapp_service.verify_code(
            verification.phone_number, 
            verification.code
        )
        
        if is_valid:
            logger.info(f"C√≥digo verificado exitosamente para {verification.phone_number}")
            return VerificationResponse(
                success=True,
                message="N√∫mero de tel√©fono verificado exitosamente",
                verified=True,
                data={
                    "telefono": verification.phone_number,  # Solo 9 d√≠gitos
                    "verificado": True,
                    "siguiente_paso": "completar_registro"
                }
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="C√≥digo de verificaci√≥n inv√°lido o expirado"
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al verificar c√≥digo: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )

@router.post("/completar-registro", response_model=dict)
async def completar_registro(
    datos_registro: RegistroCompletarWhatsApp,
    num_celular: str = Query(..., description="N√∫mero de celular verificado (debe coincidir con la verificaci√≥n previa)"),
    db: AsyncSession = Depends(obtener_sesion)
):
    """
    üìù PASO 3: Completar registro despu√©s de verificaci√≥n
    
    Completa el registro del usuario despu√©s de que su n√∫mero de tel√©fono
    haya sido verificado exitosamente por WhatsApp.
    
    IMPORTANTE: El n√∫mero de celular debe haber sido verificado previamente 
    usando los endpoints /enviar-codigo y /verificar-codigo.
    
    Args:
        datos_registro: Datos del usuario (sin num_celular)
        num_celular: N√∫mero verificado previamente por WhatsApp (query parameter)
        
    Returns:
        dict: Informaci√≥n del usuario registrado y token de acceso
    """
    try:
        # Validar formato del n√∫mero de celular
        numero_limpio = num_celular.strip().replace(' ', '').replace('-', '')
        if not numero_limpio.isdigit() or len(numero_limpio) != 9 or not numero_limpio.startswith('9'):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="N√∫mero de celular inv√°lido. Debe tener 9 d√≠gitos y empezar con 9"
            )
        
        # Verificar que el tel√©fono haya sido verificado previamente
        if not whatsapp_service.is_phone_verified(numero_limpio):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Este n√∫mero de tel√©fono no ha sido verificado. Complete primero el proceso de verificaci√≥n por WhatsApp."
            )
        
        # Verificar que el email no est√© ya registrado
        usuario_email_existente = await buscar_usuario_por_email(db, datos_registro.email)
        if usuario_email_existente:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Este email ya est√° registrado"
            )
        
        # Verificar que el tel√©fono no est√© ya registrado
        usuario_telefono_existente = await buscar_usuario_por_telefono(db, numero_limpio)
        if usuario_telefono_existente:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Este n√∫mero de tel√©fono ya est√° registrado"
            )
        
        # Preparar datos para crear el usuario
        datos_usuario = {
            'email': datos_registro.email,
            'nombres': datos_registro.nombres,
            'apellido_paterno': datos_registro.apellido_paterno,
            'apellido_materno': datos_registro.apellido_materno,
            'num_celular': numero_limpio,
            'fecha_nacimiento': datos_registro.fecha_nacimiento,
            'password': hashear_password(datos_registro.password),
            'celular_verificado': True,  # Marcar como verificado (este campo S√ç existe)
            'tipo_usuario': 'arrendatario'  # Siempre inicia como arrendatario
        }
        
        # Crear el usuario
        nuevo_usuario = await crear_usuario(db, datos_usuario)
        
        # Crear token de acceso
        token = crear_token({
            "sub": numero_limpio,
            "id": nuevo_usuario.id_usuario,
            "rol": nuevo_usuario.tipo_usuario
        })
        
        # Enviar mensaje de bienvenida por WhatsApp
        try:
            await whatsapp_service.send_welcome_message(numero_limpio, datos_registro.nombres)
        except Exception as e:
            logger.warning(f"Error al enviar mensaje de bienvenida: {e}")
            # No fallar el registro si no se puede enviar el mensaje de bienvenida
        
        # Limpiar la verificaci√≥n completada
        whatsapp_service.remove_verified_phone(numero_limpio)
        
        logger.info(f"Usuario registrado exitosamente: {nuevo_usuario.id_usuario}")
        
        return {
            "mensaje": "Usuario registrado exitosamente",
            "usuario": {
                "id": nuevo_usuario.id_usuario,
                "nombres": nuevo_usuario.nombres,
                "apellido_paterno": nuevo_usuario.apellido_paterno,
                "apellido_materno": nuevo_usuario.apellido_materno,
                "email": nuevo_usuario.email,
                "num_celular": nuevo_usuario.num_celular,
                "tipo_usuario": nuevo_usuario.tipo_usuario,
                "celular_verificado": nuevo_usuario.celular_verificado  # Usar el campo que S√ç existe
            },
            "access_token": token,
            "token_type": "bearer"
        }
        
    except IntegrityError as e:
        await db.rollback()
        if "usuarios_email_key" in str(e):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Este email ya est√° registrado"
            )
        elif "usuarios_num_celular_key" in str(e):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Este n√∫mero de tel√©fono ya est√° registrado"
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Error de integridad en la base de datos"
            )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error inesperado en el registro: {str(e)}")
        logger.error(f"Traceback completo: {e.__class__.__name__}: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "mensaje": "Error interno del servidor",
                "error_type": e.__class__.__name__,
                "error_details": str(e)
            }
        )

@router.get("/estadisticas")
async def obtener_estadisticas_verificacion():
    """
    üìä Obtener estad√≠sticas de verificaciones
    
    Endpoint para obtener informaci√≥n sobre el estado de las verificaciones
    """
    try:
        # Limpiar c√≥digos expirados
        expired_count = whatsapp_service.clean_expired_codes()
        
        # Obtener estad√≠sticas
        pending_count = whatsapp_service.get_pending_verifications_count()
        
        return {
            "pending_verifications": pending_count,
            "expired_codes_cleaned": expired_count,
            "service_status": await whatsapp_service.check_whatsapp_service_status()
        }
        
    except Exception as e:
        logger.error(f"Error al obtener estad√≠sticas: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno del servidor"
        )
